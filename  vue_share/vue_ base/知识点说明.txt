
Vue的特点：

    1. 响应式的数据绑定，数据一旦改变无需手动操作DOM，视图自动更新
    2. 可组合的视图组件，把偌大的应用根据功能拆分为一个个颗粒度合理的组件

Vue实例生命周期

    Vue实例从创建到销毁的过程，就是生命周期。
    从开始创建 -> 初始化数据 -> 编译模板 -> 挂载Dom -> 渲染 → 更新 → 渲染 -> 卸载等一系列过程,在每个过程中可以调用各种钩子函数。


v-for指令中key值的作用

    更新已渲染过的元素列表时，它默认用 “就地复用” 策略。如果删除了第一条数据，VUe不会重新生成新的元素，而是复用第一个元素，那么添加在第一个元素上的样式将不会清除，甚至会影响页面展示效果。为了给 Vue 一个提示，以便它能跟踪每个节点的身份，需要为每项提供一个唯一 key 属性。

单向数据流

    Vue采用的是单向数据流方式，数据只能从父组件流向子组件，子组件不能修改父组件传入的数据，否则Vue会给与警告。

组件间的通信

    组件是独立作用域的实例，组件可被复用，展示不同数据的时候，需要给组件传入数据。
    组件内部的状态改变不会影响其他组件，父组件要关心子组件状态，使用自定义事件监听。

    父组件 ---> 子组件 使用prop传递参数
    子组件 ---> 父组件 使用自定义事件监听状态变化

slot分发内容

    为了让组件可以组合，使用一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为内容分发。Vue.js 实现了一个内容分发 API，使用特殊的 <slot> 元素作为原始内容的插槽。
    使用slot的好处就是可以定制个性化组件结构

实现子组件双向数据绑定

    让组件的 v-model 生效，实现双向数据绑定，则必须满足两个条件：
        1. 接受一个 value 属性
        2. 在有新的 value 时触发 input 事件


异步组件

    在大型应用中，可能需要将应用拆分为多个小模块，按需从服务器下载。Vue.js 允许将组件定义为一个工厂函数，动态地解析组件的定义。在组件需要渲染时触发工厂函数，并且把结果缓存起来，用于后面的再次渲染。

vue-cli脚手架中webpack的配置分析

    vue-cli脚手架帮助我们写好基础代码，它具备生成目录结构、本地开发调试、代码部署、热加载、单元测试等功能。
    vue-cli是使用webpack做的构建工具。解读生成项目目录的配置文件源码，分析了webpack的基本配置，以及生成在内存文件和热加载使用的中间件。






